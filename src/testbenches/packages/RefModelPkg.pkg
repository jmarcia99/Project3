package RefModelPkg;
  import TablePkg::*;
	
  virtual class Ref_Base;
    typedef bit [0:3][7:0] word_t;
    typedef bit [0:15][7:0] key_t;
    typedef bit [0:10][0:15][7:0] all_keys_t;
    
    typedef bit [0:3][0:3][7:0] pkt_key_t;
    typedef bit [0:3][0:3][7:0] pkt_text_t;
    
    typedef logic [0:3][0:3][7:0] smpl_key_t;  
    typedef logic [0:3][0:3][7:0] smpl_text_t; 
  endclass : Ref_Base  

  virtual class KeyExpansion extends Ref_Base;
    key_t key;
    all_keys_t round_key;
    bit debug_key_exp;
    
    function void f_show_round_keys();
      foreach(round_key[index]) begin 
        $display("round_key [%0d] \t %h", index, round_key[index]);
      end 
    endfunction

    function void f_expand_key();
      for (int i = 1; i < 11; i++) begin 
        round_key[i][0:3] = f_first_word(round_key[i-1][12:15], i);
        round_key[i][4:7] = round_key[i][0:3] ^ round_key[i-1][4:7];
        round_key[i][8:11] = round_key[i][4:7] ^ round_key[i-1][8:11];
        round_key[i][12:15] = round_key[i][8:11] ^ round_key[i-1][12:15];
      end
      
      if (debug_key_exp) f_show_round_keys();
    endfunction 

    function word_t f_first_word(
      input word_t word,
      input int i
    );
      word_t new_word;

      new_word[0:2] = word[1:3];
      new_word[3] = word[0];

      foreach (new_word[index]) begin : Substitute_Word
        new_word[index] = get_sbox_value(new_word[index]);
      end

      new_word = new_word ^ get_rcon_value(i);
      new_word = new_word ^ round_key[i-1][0:3];

      return new_word;
    endfunction 

  endclass : KeyExpansion


  virtual class TextEncryption extends KeyExpansion;
    key_t state_text;
    bit debug_text;
    int round;

    function void f_show_current_text(
      input string transformation
    );
      $display("round[%0d].%s  \t %h", round, transformation, state_text);
    endfunction
    
    function void f_encrypt_text();
      for (int i = 0; i < 10; i++) begin 
        round = i;
        f_add_round_key(i);
        f_sub_bytes();
        f_shift_rows();

        if (i < 9) f_mix_columns();
      end

      round = 10;
      f_add_round_key(10);
    endfunction 

    function void f_add_round_key(
      input int i
    );
      state_text = state_text ^ round_key[i];

      if (debug_text && round < 11) f_show_current_text("start");
    endfunction  

    function void f_sub_bytes();
      foreach (state_text[index]) begin 
          state_text[index] = get_sbox_value(state_text[index]);
      end

      if (debug_text) f_show_current_text("s_box");
    endfunction 

    function void f_shift_rows();
      key_t shifted_text;

      shifted_text[0] = state_text[0];
      shifted_text[4] = state_text[4];
      shifted_text[8] = state_text[8];
      shifted_text[12] = state_text[12];

      shifted_text[1] = state_text[5];
      shifted_text[5] = state_text[9];
      shifted_text[9] = state_text[13];
      shifted_text[13] = state_text[1];

      shifted_text[2] = state_text[10];
      shifted_text[6] = state_text[14];
      shifted_text[10] = state_text[2];
      shifted_text[14] = state_text[6];

      shifted_text[3] = state_text[15];
      shifted_text[7] = state_text[3];
      shifted_text[11] = state_text[7];
      shifted_text[15] = state_text[11];

      state_text = shifted_text;

      if (debug_text) f_show_current_text("s_row");
    endfunction 

    function word_t get_mcol_value(
      input word_t column
    );
      word_t new_column;

      new_column[0] = mult_by_2(column[0]) ^ mult_by_3(column[1]) ^ column[2] ^ column[3];
      new_column[1] = column[0] ^ mult_by_2(column[1]) ^ mult_by_3(column[2]) ^ column[3];
      new_column[2] = column[0] ^ column[1] ^ mult_by_2(column[2]) ^ mult_by_3(column[3]);
      new_column[3] = mult_by_3(column[0]) ^ column[1] ^ column[2] ^ mult_by_2(column[3]);

      return new_column;

    endfunction

    function bit [7:0] mult_by_2 (
      input bit [7:0] operand
    ); 
      bit [7:0] result;
      result = operand << 1;
      if (operand[7] == 1) begin
        result = result ^ 8'h1b;
      end

      return result;
    endfunction 

    function bit [7:0] mult_by_3 (
      input bit [7:0] operand
    );
      bit [7:0] result;
      result = mult_by_2(operand);
      result = result ^ operand;

      return result;
    endfunction 

    function void f_mix_columns();
      state_text[0:3] = get_mcol_value(state_text[0:3]);
      state_text[4:7] = get_mcol_value(state_text[4:7]);
      state_text[8:11] = get_mcol_value(state_text[8:11]);
      state_text[12:15] = get_mcol_value(state_text[12:15]);

      if (debug_text) f_show_current_text("m_col");
    endfunction 

  endclass : TextEncryption 

endpackage : RefModelPkg
